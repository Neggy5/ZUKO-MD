const fs = require('fs');const { isAdmin } = require('../lib/isAdmin');async function addCommand(sock, chatId, message) {    try {        // Check if it's a group        if (!chatId.endsWith('@g.us')) {            return sock.sendMessage(chatId, {                text: '❌ This command only works in groups!'            });        }        // Verify admin status        const sender = message.key.participant || message.key.remoteJid;        const adminStatus = await isAdmin(sock, chatId, sender);                if (!adminStatus.isSenderAdmin && !message.key.fromMe) {            return sock.sendMessage(chatId, {                text: '❌ Only admins can add members!',                mentions: []            });        }        // Get mentioned users or message text        const mentionedJids = message.message?.extendedTextMessage?.contextInfo?.mentionedJid || [];        const textNumbers = message.message?.extendedTextMessage?.text?.match(/[\d+]+/g) || [];        if (mentionedJids.length === 0 && textNumbers.length === 0) {            return sock.sendMessage(chatId, {                text: '❌ Please mention users or include phone numbers\nExample: `.add @user1 @user2` or `.add 1234567890`',                mentions: []            });        }        // Process all numbers        const usersToAdd = [            ...mentionedJids,            ...textNumbers.map(num => num.includes('@') ? num : `${num.replace(/[^\d]/g, '')}@s.whatsapp.net`)        ].filter((v, i, a) => a.indexOf(v) === i); // Remove duplicates        // Verify bot is admin        if (!adminStatus.isBotAdmin) {            return sock.sendMessage(chatId, {                text: '❌ Bot needs admin rights to add members',                mentions: []            });        }        // Add users with progress updates        await sock.sendMessage(chatId, {            text: `⏳ Adding ${usersToAdd.length} member(s)...`,            mentions: []        });        const results = await sock.groupParticipantsUpdate(            chatId,            usersToAdd,            'add'        );        // Format result message        let successCount = 0;        let responseText = '✅ Addition Results:\n\n';        usersToAdd.forEach((user, index) => {            if (results[index] === 200) {                responseText += `• @${user.split('@')[0]} - Added\n`;                successCount++;            } else {                responseText += `• @${user.split('@')[0]} - Failed (${getErrorText(results[index])})\n`;            }        });        responseText += `\nSuccess: ${successCount}/${usersToAdd.length}`;        await sock.sendMessage(chatId, {            text: responseText,            mentions: usersToAdd        });    } catch (error) {        console.error('Error in add command:', error);        await sock.sendMessage(chatId, {            text: '❌ Failed to add members. They may have privacy restrictions.',            mentions: []        });    }}function getErrorText(code) {    const errors = {        400: 'Invalid number',        403: 'Privacy settings block adding',        404: 'User not on WhatsApp',        408: 'Request timed out',        500: 'Server error'    };    return errors[code] || `Error ${code}`;}module.exports = addCommand;