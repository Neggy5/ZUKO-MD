const axios = require('axios');
const mumaker = require('mumaker');
const NodeCache = require('node-cache');

// Cache results for 1 hour to avoid duplicate API calls
const textCache = new NodeCache({ stdTTL: 3600 });

// Base channel info template
const channelInfo = {
    forwardingScore: 1,
    isForwarded: true,
    forwardedNewsletterMessageInfo: {
        newsletterJid: '120363401680775438@newsletter',
        newsletterName: 'ùêôùêîùêäùêé-ùêåùêÉ',
        serverMessageId: -1
    }
};

// Text effect templates with proper error handling
const textEffects = {
    metallic: "https://en.ephoto360.com/impressive-decorative-3d-metal-text-effect-798.html",
    ice: "https://en.ephoto360.com/ice-text-effect-online-101.html",
    snow: "https://en.ephoto360.com/create-a-snow-3d-text-effect-free-online-621.html",
    impressive: "https://en.ephoto360.com/create-3d-colorful-paint-text-effect-online-801.html",
    matrix: "https://en.ephoto360.com/matrix-text-effect-154.html",
    light: "https://en.ephoto360.com/light-text-effect-futuristic-technology-style-648.html",
    neon: "https://en.ephoto360.com/create-colorful-neon-light-text-effects-online-797.html",
    devil: "https://en.ephoto360.com/neon-devil-wings-text-effect-online-683.html",
    purple: "https://en.ephoto360.com/purple-text-effect-online-100.html",
    thunder: "https://en.ephoto360.com/thunder-text-effect-online-97.html",
    leaves: "https://en.ephoto360.com/green-brush-text-effect-typography-maker-online-153.html",
    '1917': "https://en.ephoto360.com/1917-style-text-effect-523.html",
    arena: "https://en.ephoto360.com/create-cover-arena-of-valor-by-mastering-360.html",
    hacker: "https://en.ephoto360.com/create-anonymous-hacker-avatars-cyan-neon-677.html",
    sand: "https://en.ephoto360.com/write-names-and-messages-on-the-sand-online-582.html",
    blackpink: "https://en.ephoto360.com/create-a-blackpink-style-logo-with-members-signatures-810.html",
    glitch: "https://en.ephoto360.com/create-digital-glitch-text-effects-online-767.html",
    fire: "https://en.ephoto360.com/flame-lettering-effect-372.html"
};

// Message templates with improved formatting
const messageTemplates = {
    error: (message) => ({
        text: `‚ùå ${message}\n\nUsage: .<effect> Your Text\nExample: .neon ZUKO-MD`,
        contextInfo: channelInfo
    }),
    success: (text, imageUrl) => ({
        image: { url: imageUrl },
        caption: `‚ú® ${text}\n\nGENERATED BY ùêôùêîùêäùêé-ùêåùêÉ`,
        contextInfo: channelInfo
    }),
    help: () => ({
        text: `üñºÔ∏è *Available Text Effects*\n\n` +
              Object.keys(textEffects).map(effect => `‚Ä¢ ${effect}`).join('\n') +
              `\n\nUsage: .<effect> Your Text\nExample: .neon Hello World`,
        contextInfo: channelInfo
    })
};

async function textmakerCommand(sock, chatId, message, q, type) {
    try {
        // Show help if no text provided
        if (!q || q.trim().split(' ').length < 2) {
            return await sock.sendMessage(chatId, messageTemplates.help());
        }

        const text = q.split(' ').slice(1).join(' ');
        const cacheKey = `${type}:${text}`;

        // Check cache first
        const cachedImage = textCache.get(cacheKey);
        if (cachedImage) {
            return await sock.sendMessage(chatId, 
                messageTemplates.success(text, cachedImage)
            );
        }

        // Validate effect type
        if (!textEffects[type]) {
            return await sock.sendMessage(chatId, 
                messageTemplates.error(`Invalid effect type. Use .textmaker to see available effects`)
            );
        }

        // Generate the text effect
        const result = await mumaker.ephoto(textEffects[type], text, { timeout: 10000 });

        if (!result?.image) {
            throw new Error('Failed to generate image');
        }

        // Cache the result
        textCache.set(cacheKey, result.image);

        // Send the result
        await sock.sendMessage(chatId, 
            messageTemplates.success(text, result.image)
        );

    } catch (error) {
        console.error(`Textmaker error (${type}):`, error);
        
        const errorMessage = error.response ? 
            'API service unavailable. Please try again later.' :
            'Failed to generate text effect. The text may be too long or contain invalid characters.';
        
        await sock.sendMessage(chatId, 
            messageTemplates.error(errorMessage)
        );
    }
}

module.exports = textmakerCommand;