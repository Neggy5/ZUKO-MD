const fs = require('fs');const path = require('path');// Store blocked users (persistent storage)const BLOCKED_USERS_FILE = './data/blocked.json';// Initialize blocked users listlet blockedUsers = {};try {    blockedUsers = JSON.parse(fs.readFileSync(BLOCKED_USERS_FILE));} catch (error) {    fs.writeFileSync(BLOCKED_USERS_FILE, '{}');}async function blockCommand(sock, chatId, message) {    try {        // Check if sender is bot owner        const ownerNumber = settings.ownerNumber.replace(/[^0-9]/g, '') + '@s.whatsapp.net';        const sender = message.key.participant || message.key.remoteJid;                if (sender !== ownerNumber) {            return sock.sendMessage(chatId, {                text: '‚ùå Only the bot owner can block users!',                mentions: []            });        }        // Get mentioned user or quoted sender        const mentionedJid = message.message?.extendedTextMessage?.contextInfo?.mentionedJid?.[0];        const quotedJid = message.message?.extendedTextMessage?.contextInfo?.participant;        const targetJid = mentionedJid || quotedJid;        if (!targetJid) {            return sock.sendMessage(chatId, {                text: '‚ùå Please mention or reply to the user you want to block.\nExample: `.block @user` or reply to their message with `.block`',                mentions: []            });        }        // Block the user        blockedUsers[targetJid] = {            timestamp: Date.now(),            blockedBy: sender,            reason: 'Blocked by owner'        };        // Save to file        fs.writeFileSync(BLOCKED_USERS_FILE, JSON.stringify(blockedUsers, null, 2));        await sock.sendMessage(chatId, {            text: `üö´ @${targetJid.split('@')[0]} has been blocked from using this bot.`,            mentions: [targetJid]        });    } catch (error) {        console.error('Error in block command:', error);        await sock.sendMessage(chatId, {            text: '‚ùå Failed to block user',            mentions: []        });    }}// Middleware to check blocked usersfunction isUserBlocked(userJid) {    return !!blockedUsers[userJid];}async function unblockCommand(sock, chatId, message) {    try {        // Similar owner check as blockCommand...        // ... (implementation omitted for brevity)    } catch (error) {        console.error('Error in unblock command:', error);    }}module.exports = {    blockCommand,    unblockCommand,    isUserBlocked};