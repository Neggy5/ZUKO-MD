const fs = require('fs');const path = require('path');const { logCall } = require('../lib/callLogger');// File to store anticall settingsconst ANTICALL_FILE = './data/anticall.json';// Ensure data directory existsif (!fs.existsSync('./data')) {    fs.mkdirSync('./data');}// Load anticall settingsfunction loadAnticallSettings() {    try {        if (fs.existsSync(ANTICALL_FILE)) {            return JSON.parse(fs.readFileSync(ANTICALL_FILE, 'utf8'));        }    } catch (error) {        console.error('Error loading anticall settings:', error);    }    return {};}// Save anticall settingsfunction saveAnticallSettings(settings) {    try {        fs.writeFileSync(ANTICALL_FILE, JSON.stringify(settings, null, 2));        return true;    } catch (error) {        console.error('Error saving anticall settings:', error);        return false;    }}// Anticall command handlerasync function anticallCommand(sock, chatId, message, args) {    const isGroup = chatId.endsWith('@g.us');    const sender = message.key.participant || message.key.remoteJid;        // Only bot owner can configure anticall    if (!message.key.fromMe) {        await sock.sendMessage(chatId, {            text: '❌ This command is only available for the bot owner!',            contextInfo: {                forwardingScore: 1,                isForwarded: true,                forwardedNewsletterMessageInfo: {                    newsletterJid: '120363420143192043@newsletter',                    newsletterName: '𝐙𝐔𝐊𝐎-𝐌𝐃',                    serverMessageId: -1                }            }        });        return;    }        const action = args[0]?.toLowerCase();    const settings = loadAnticallSettings();        if (!action || (action !== 'on' && action !== 'off' && action !== 'status')) {        // Show current status and usage        const currentStatus = settings.enabled ? '🟢 ENABLED' : '🔴 DISABLED';        const blockCount = settings.blockedCalls ? Object.keys(settings.blockedCalls).length : 0;                await sock.sendMessage(chatId, {            text: `📞 *ANTICALL SETTINGS*\n\n` +                 `Status: ${currentStatus}\n` +                 `Blocked Calls: ${blockCount}\n\n` +                 `*Usage:*\n` +                 `.anticall on - Enable call blocking\n` +                 `.anticall off - Disable call blocking\n` +                 `.anticall status - Show current status\n` +                 `.anticall list - Show blocked numbers\n` +                 `.anticall unblock <number> - Unblock a number`,            contextInfo: {                forwardingScore: 1,                isForwarded: true,                forwardedNewsletterMessageInfo: {                    newsletterJid: '120363420143192043@newsletter',                    newsletterName: '𝐙𝐔𝐊𝐎-𝐌𝐃',                    serverMessageId: -1                }            }        });        return;    }        if (action === 'on') {        settings.enabled = true;        if (saveAnticallSettings(settings)) {            await sock.sendMessage(chatId, {                text: '✅ *ANTICALL ENABLED*\n\nThe bot will now automatically block all incoming calls.',                contextInfo: {                    forwardingScore: 1,                    isForwarded: true,                    forwardedNewsletterMessageInfo: {                        newsletterJid: '120363420143192043@newsletter',                        newsletterName: '𝐙𝐔𝐊𝐎-𝐌𝐃',                        serverMessageId: -1                    }                }            });        } else {            await sock.sendMessage(chatId, {                text: '❌ Failed to enable anticall. Check console for details.',                contextInfo: {                    forwardingScore: 1,                    isForwarded: true,                    forwardedNewsletterMessageInfo: {                        newsletterJid: '120363420143192043@newsletter',                        newsletterName: '𝐙𝐔𝐊𝐎-𝐌𝐃',                        serverMessageId: -1                    }                }            });        }    }     else if (action === 'off') {        settings.enabled = false;        if (saveAnticallSettings(settings)) {            await sock.sendMessage(chatId, {                text: '❌ *ANTICALL DISABLED*\n\nIncoming calls will no longer be automatically blocked.',                contextInfo: {                    forwardingScore: 1,                    isForwarded: true,                    forwardedNewsletterMessageInfo: {                        newsletterJid: '120363420143192043@newsletter',                        newsletterName: '𝐙𝐔𝐊𝐎-𝐌𝐃',                        serverMessageId: -1                    }                }            });        } else {            await sock.sendMessage(chatId, {                text: '❌ Failed to disable anticall. Check console for details.',                contextInfo: {                    forwardingScore: 1,                    isForwarded: true,                    forwardedNewsletterMessageInfo: {                        newsletterJid: '120363420143192043@newsletter',                        newsletterName: '𝐙𝐔𝐊𝐎-𝐌𝐃',                        serverMessageId: -1                    }                }            });        }    }    else if (action === 'status') {        const status = settings.enabled ? '🟢 ENABLED' : '🔴 DISABLED';        const blockCount = settings.blockedCalls ? Object.keys(settings.blockedCalls).length : 0;                await sock.sendMessage(chatId, {            text: `📞 *ANTICALL STATUS*\n\nStatus: ${status}\nBlocked Calls: ${blockCount}`,            contextInfo: {                forwardingScore: 1,                isForwarded: true,                forwardedNewsletterMessageInfo: {                    newsletterJid: '120363420143192043@newsletter',                    newsletterName: '𝐙𝐔𝐊𝐎-𝐌𝐃',                    serverMessageId: -1                }            }        });    }    else if (action === 'list') {        if (!settings.blockedCalls || Object.keys(settings.blockedCalls).length === 0) {            await sock.sendMessage(chatId, {                text: '📋 No numbers have been blocked yet.',                contextInfo: {                    forwardingScore: 1,                    isForwarded: true,                    forwardedNewsletterMessageInfo: {                        newsletterJid: '120363420143192043@newsletter',                        newsletterName: '𝐙𝐔𝐊𝐎-𝐌𝐃',                        serverMessageId: -1                    }                }            });            return;        }                let listText = '📋 *BLOCKED NUMBERS*\n\n';        Object.entries(settings.blockedCalls).forEach(([number, timestamp], index) => {            const date = new Date(timestamp).toLocaleString();            listText += `${index + 1}. ${number} (Blocked: ${date})\n`;        });                await sock.sendMessage(chatId, {            text: listText,            contextInfo: {                forwardingScore: 1,                isForwarded: true,                forwardedNewsletterMessageInfo: {                    newsletterJid: '120363420143192043@newsletter',                    newsletterName: '𝐙𝐔𝐊𝐎-𝐌𝐃',                    serverMessageId: -1                }            }        });    }    else if (action === 'unblock') {        const numberToUnblock = args[1];        if (!numberToUnblock) {            await sock.sendMessage(chatId, {                text: '❌ Please specify a number to unblock. Usage: `.anticall unblock <number>`',                contextInfo: {                    forwardingScore: 1,                    isForwarded: true,                    forwardedNewsletterMessageInfo: {                        newsletterJid: '120363420143192043@newsletter',                        newsletterName: '𝐙𝐔𝐊𝐎-𝐌𝐃',                        serverMessageId: -1                    }                }            });            return;        }                if (settings.blockedCalls && settings.blockedCalls[numberToUnblock]) {            delete settings.blockedCalls[numberToUnblock];            if (saveAnticallSettings(settings)) {                await sock.sendMessage(chatId, {                    text: `✅ Number ${numberToUnblock} has been unblocked.`,                    contextInfo: {                        forwardingScore: 1,                        isForwarded: true,                        forwardedNewsletterMessageInfo: {                            newsletterJid: '120363420143192043@newsletter',                            newsletterName: '𝐙𝐔𝐊𝐎-𝐌𝐃',                            serverMessageId: -1                        }                    }                });            } else {                await sock.sendMessage(chatId, {                    text: '❌ Failed to unblock number. Check console for details.',                    contextInfo: {                        forwardingScore: 1,                        isForwarded: true,                        forwardedNewsletterMessageInfo: {                            newsletterJid: '120363420143192043@newsletter',                            newsletterName: '𝐙𝐔𝐊𝐎-𝐌𝐃',                            serverMessageId: -1                        }                    }                });            }        } else {            await sock.sendMessage(chatId, {                text: `❌ Number ${numberToUnblock} is not in the blocked list.`,                contextInfo: {                    forwardingScore: 1,                    isForwarded: true,                    forwardedNewsletterMessageInfo: {                        newsletterJid: '120363420143192043@newsletter',                        newsletterName: '𝐙𝐔𝐊𝐎-𝐌𝐃',                        serverMessageId: -1                    }                }            });        }    }}// Function to handle incoming callsasync function handleIncomingCall(sock, call) {    const settings = loadAnticallSettings();        // If anticall is disabled, do nothing    if (!settings.enabled) return false;        try {        const callerId = call.from;        const timestamp = Date.now();                // Initialize blockedCalls object if it doesn't exist        if (!settings.blockedCalls) {            settings.blockedCalls = {};        }                // Add to blocked calls list        settings.blockedCalls[callerId] = timestamp;        saveAnticallSettings(settings);                // Reject the call        await sock.rejectCall(call.id, call.from);        logCall(callerId, 'blocked', true);        console.log(`📞 Blocked incoming call from: ${callerId}`);                // Send notification to owner if configured        if (settings.notifyOwner) {            const ownerJid = sock.user.id.split(':')[0] + '@s.whatsapp.net'; // Bot owner's JID            await sock.sendMessage(ownerJid, {                text: `📞 *CALL BLOCKED*\n\nCall from: ${callerId}\nTime: ${new Date(timestamp).toLocaleString()}`,                contextInfo: {                    forwardingScore: 1,                    isForwarded: true,                    forwardedNewsletterMessageInfo: {                        newsletterJid: '120363420143192043@newsletter',                        newsletterName: '𝐙𝐔𝐊𝐎-𝐌𝐃',                        serverMessageId: -1                    }                }            });        }                return true;    } catch (error) {        console.error('Error handling incoming call:', error);        return false;    }}module.exports = {    anticallCommand,    handleIncomingCall,    loadAnticallSettings};